var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameUI_1 = require("./script/GameUI");
var GameControl_1 = require("./script/GameControl");
var Bullet_1 = require("./script/Bullet");
var DropBox_1 = require("./script/DropBox");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("script/GameUI.ts", GameUI_1.default);
        reg("script/GameControl.ts", GameControl_1.default);
        reg("script/Bullet.ts", Bullet_1.default);
        reg("script/DropBox.ts", DropBox_1.default);
    };
    GameConfig.width = 720;
    GameConfig.height = 1280;
    GameConfig.scaleMode = Laya.Stage.SCALE_SHOWALL;
    GameConfig.screenMode = "none";
    GameConfig.startScene = "test/TestScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./script/Bullet":7,"./script/DropBox":8,"./script/GameControl":9,"./script/GameUI":10}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Prop_1 = require("./Prop");
var Mathf_1 = require("../Mathf");
var Point = Laya.Point;
var Random_1 = require("../Helpers/Random");
var ChartPolygonPropertyView = /** @class */ (function (_super) {
    __extends(ChartPolygonPropertyView, _super);
    function ChartPolygonPropertyView() {
        var _this = _super.call(this) || this;
        /** 属性数据 */
        _this.data = [];
        /** 数据 最后绘制的 */
        _this.lastData = [];
        /** 数据 当前绘制的 */
        _this.props = [];
        /** 点 */
        _this.points = [];
        /** 中心点 */
        _this.center = new Point();
        /** 角度偏远 */
        _this.angleOffset = -15;
        /** 最大半径 */
        _this.radius = 200;
        /** 值最大半径比例 */
        _this.radiusValueRate = 1;
        /** 文本半径比例 */
        _this.radiusTextRate = 1.2;
        /** 刻度几等分 */
        _this.mark = 3;
        _this.markRadiusRate = [1, 0.7, 0.4];
        _this.markFillColors = ['#9e97daFF', '#8c84dbFF', '#7b71dbFF'];
        _this.markLineColors = ['#FFFFFF33', '#bcb6edFF', '#bcb6edFF'];
        _this.markLineWidths = [6, 2, 2];
        _this.lineColor = '#bcb6edFF';
        _this.lineWidth = 6;
        _this.fillColor = '#FFFFFF66';
        _this.pointSize = 6;
        _this.pointColor = '#b8f0d0FF';
        _this.valueFillColor = '#b8f0d066';
        _this.valueLineColor = '#b8f0d0FF';
        _this.valueLineWidth = 2;
        _this.testMin = 100;
        _this.testMax = 500;
        _this.isFirst = true;
        _this.tweenDuration = 1000;
        _this.tweenMax = 100;
        _this._tweenIndex = 0;
        window['c'] = _this;
        _this.test();
        return _this;
    }
    ChartPolygonPropertyView.prototype.test = function () {
        this.testData();
        Laya.stage.on(Laya.Event.CLICK, this, this.testData);
    };
    ChartPolygonPropertyView.prototype.testData = function () {
        this.data.length = 0;
        var prop;
        prop = new Prop_1.default();
        prop.id = 1;
        prop.val = Random_1.default.range(this.testMin, this.testMax);
        prop.name = "口才";
        this.data.push(prop);
        prop = new Prop_1.default();
        prop.id = 2;
        prop.val = Random_1.default.range(this.testMin, this.testMax);
        prop.name = "娱乐";
        this.data.push(prop);
        prop = new Prop_1.default();
        prop.id = 3;
        prop.val = Random_1.default.range(this.testMin, this.testMax);
        prop.name = "表演";
        this.data.push(prop);
        prop = new Prop_1.default();
        prop.id = 4;
        prop.val = Random_1.default.range(this.testMin, this.testMax);
        prop.name = "才艺";
        this.data.push(prop);
        prop = new Prop_1.default();
        prop.id = 5;
        prop.val = Random_1.default.range(this.testMin, this.testMax);
        prop.name = "魅力";
        this.data.push(prop);
        this.setData(this.data);
    };
    /** 设置数据 */
    ChartPolygonPropertyView.prototype.setData = function (props) {
        this.data = props;
        if (this.data.length != this.props.length) {
            for (var i = 0; i < props.length; i++) {
                if (i < this.props.length) {
                    this.props[i].copyValue(props[i]);
                }
                else {
                    this.props.push(props[i].clone());
                }
            }
        }
        if (this.data.length != this.lastData.length) {
            for (var i = 0; i < props.length; i++) {
                if (i < this.lastData.length) {
                    this.lastData[i].copyValue(props[i]);
                }
                else {
                    this.lastData.push(props[i].clone());
                }
            }
        }
        if (this.isFirst) {
            this.draw();
            this.isFirst = false;
        }
        else
            this.tweenDraw();
    };
    Object.defineProperty(ChartPolygonPropertyView.prototype, "tweenIndex", {
        get: function () {
            return this._tweenIndex;
        },
        set: function (val) {
            this._tweenIndex = val;
            var count = this.props.length;
            var prop;
            var rate = this._tweenIndex / this.tweenMax;
            for (var i = 0; i < count; i++) {
                prop = this.props[i];
                prop.val = Laya.MathUtil.lerp(this.lastData[i].val, this.data[i].val, rate);
            }
            if (rate >= 1) {
                for (var i = 0; i < this.lastData.length; i++) {
                    this.lastData[i].val = this.data[i].val;
                }
            }
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    /** 缓动绘制 */
    ChartPolygonPropertyView.prototype.tweenDraw = function () {
        this.tweenIndex = 0;
        Laya.Tween.clearAll(this);
        Laya.Tween.to(this, { tweenIndex: this.tweenMax }, this.tweenDuration, Laya.Ease.linearNone);
    };
    /** 绘制 */
    ChartPolygonPropertyView.prototype.draw = function () {
        this.graphics.clear();
        // 绘制刻度
        for (var i = 0; i < this.mark; i++) {
            this.drawMark(this.markRadiusRate[i] * this.radius, this.markFillColors[i], this.markLineColors[i], this.markLineWidths[i]);
        }
        // 绘制经线
        this.drawLongitude();
        // 绘制值
        this.drawValue();
        // 绘制文本
        this.drawText();
    };
    /** 计算点 */
    ChartPolygonPropertyView.prototype.calculationPoints = function (radius) {
        if (!radius || radius <= 0)
            radius = this.radius;
        var count = this.props.length;
        var averageAngle = 360 / count;
        for (var i = 0; i < count; i++) {
            var angle = this.angleOffset + averageAngle * i;
            var point = void 0;
            if (i < this.points.length) {
                point = this.points[i];
            }
            else {
                point = new Point();
                this.points.push(point);
            }
            point.x = Mathf_1.default.anglePointX(angle, radius, this.center.x);
            point.y = Mathf_1.default.anglePointY(angle, radius, this.center.y);
        }
    };
    /** 绘制文本 */
    ChartPolygonPropertyView.prototype.drawText = function () {
        var count = this.props.length;
        this.calculationPoints();
    };
    /** 绘制值 */
    ChartPolygonPropertyView.prototype.drawValue = function () {
        var count = this.props.length;
        var averageAngle = 360 / count;
        var maxPropVal = 0;
        for (var i = 0; i < count; i++) {
            maxPropVal = Math.max(this.props[i].val, maxPropVal);
        }
        var point;
        for (var i = 0; i < count; i++) {
            var angle = this.angleOffset + averageAngle * i;
            if (i < this.points.length) {
                point = this.points[i];
            }
            else {
                point = new Point();
                this.points.push(point);
            }
            var radius = maxPropVal <= 0 ? 0 : this.props[i].val / maxPropVal * this.radiusValueRate * this.radius;
            point.x = Mathf_1.default.anglePointX(angle, radius, this.center.x);
            point.y = Mathf_1.default.anglePointY(angle, radius, this.center.y);
        }
        var pointArray = this.pointsToArray(this.points, count);
        // 绘制多边形
        this.graphics.drawPoly(this.center.x, this.center.y, pointArray, this.valueFillColor, this.valueLineColor, this.valueLineWidth);
        // 绘制点
        for (var i = 0; i < count; i++) {
            point = this.points[i];
            this.graphics.drawCircle(point.x, point.y, this.pointSize, this.pointColor);
        }
    };
    /** 绘制经线 */
    ChartPolygonPropertyView.prototype.drawLongitude = function () {
        var count = this.props.length;
        this.calculationPoints(this.radius);
        for (var i = 0; i < count; i++) {
            var point = this.points[i];
            this.graphics.drawLine(this.center.x, this.center.y, point.x, point.y, this.lineColor, this.lineWidth);
        }
    };
    /** 绘制刻度 */
    ChartPolygonPropertyView.prototype.drawMark = function (radius, fillColor, lineColor, lineWidth) {
        var count = this.props.length;
        this.calculationPoints(radius);
        var pointArray = this.pointsToArray(this.points, count);
        this.graphics.drawPoly(this.center.x, this.center.y, pointArray, fillColor, lineColor, lineWidth);
    };
    ChartPolygonPropertyView.prototype.pointsToArray = function (points, count) {
        (count === void 0) && (count = points.length);
        count = Math.min(count, this.points.length);
        var arr = [];
        arr.length = 0;
        var point;
        for (var i = 0; i < count; i++) {
            point = points[i];
            arr.push(point.x, point.y);
        }
        return arr;
    };
    return ChartPolygonPropertyView;
}(Laya.Sprite));
exports.default = ChartPolygonPropertyView;
},{"../Helpers/Random":4,"../Mathf":5,"./Prop":3}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Prop = /** @class */ (function () {
    function Prop() {
        this.id = 0;
        this.val = 0;
        this.name = "";
    }
    Prop.prototype.clone = function () {
        var d = new Prop();
        d.id = this.id;
        d.val = this.val;
        d.name = this.name;
        return d;
    };
    Prop.prototype.copyValue = function (p) {
        this.id = p.id;
        this.val = p.val;
        this.name = p.name;
        return this;
    };
    return Prop;
}());
exports.default = Prop;
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Random = /** @class */ (function () {
    function Random() {
    }
    // int
    // min <= r < max
    Random.range = function (min, max) {
        var range = max - min;
        var rand = Math.random();
        return min + Math.floor(range * rand);
    };
    // int
    // min <= r <= max
    Random.rangeBoth = function (min, max) {
        var range = max - min;
        var rand = Math.random();
        return min + Math.round(range * rand);
    };
    // int
    // min < r < max
    Random.rangeBetween = function (min, max) {
        var range = max - min;
        var rand = Math.random();
        if (Math.round(rand * range) == 0) {
            return min + 1;
        }
        else if (Math.round(rand * max) == max) {
            return max - 1;
        }
        else {
            return min + Math.round(rand * range) - 1;
        }
    };
    /// <summary>
    /// 乱序排列一个数组
    /// </summary>
    Random.GetDisorderList = function (list) {
        var countNum = list.length;
        var listA = new Array();
        var listB = new Array();
        for (var i = 0; i < countNum; i++) {
            listA.push(list[i]);
        }
        while (listB.length < countNum) {
            var index = Random.range(0, listA.length);
            if (listB.indexOf(listA[index]) === -1) {
                listB.push(listA[index]);
                listA.splice(index, 1);
            }
        }
        return listB;
    };
    return Random;
}());
exports.default = Random;
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Vector3 = Laya.Vector3;
var Mathf = /** @class */ (function () {
    function Mathf() {
    }
    Mathf.clamp = function (num, min, max) {
        return Math.max(Math.min(num, Math.max(min, max)), Math.min(min, max));
    };
    Mathf.Clamp01 = function (value) {
        if (value < 0.0)
            return 0.0;
        if (value > 1.0)
            return 1;
        return value;
    };
    /// <summary>
    ///   <para>Linearly interpolates between a and b by t.</para>
    /// </summary>
    /// <param name="a"></param>
    /// <param name="b"></param>
    /// <param name="t"></param>
    Mathf.Lerp = function (a, b, t) {
        return a + (b - a) * Mathf.Clamp01(t);
    };
    /** 弧度, 计算2个点 */
    Mathf.radian = function (fromX, fromY, toX, toY) {
        var dx = toX - fromX;
        var dy = toY - fromY;
        return Math.atan2(dy, dx);
    };
    /** 角度, 计算2个点 */
    Mathf.angle = function (fromX, fromY, toX, toY) {
        return this.radian(fromX, fromY, toX, toY) * 180 / Math.PI;
    };
    /** 角度 转 弧度 */
    Mathf.angleToRadian = function (angle) {
        return angle * Math.PI / 180;
    };
    /** 弧度 转 角度 */
    Mathf.radianToAngle = function (radian) {
        return radian * 180 / Math.PI;
    };
    /** 距离, 计算2个点 */
    Mathf.distanceangle = function (fromX, fromY, toX, toY) {
        var dx = toX - fromX;
        var dy = toY - fromY;
        return Math.sqrt(dx * dx + dy * dy);
    };
    /** 方向延迟点 */
    Mathf.directionPoint = function (fromX, fromY, toX, toY, length) {
        var angle = this.radian(fromX, fromY, toX, toY);
        var point = new Laya.Point();
        point.x = Math.cos(angle) * length;
        point.y = Math.sin(angle) * length;
        point.x += fromX;
        point.y += fromY;
        return point;
    };
    Mathf.directionPointX = function (fromX, fromY, toX, toY, length) {
        return Math.cos(this.radian(fromX, fromY, toX, toY)) * length + fromX;
    };
    Mathf.directionPointY = function (fromX, fromY, toX, toY, length) {
        return Math.sin(this.radian(fromX, fromY, toX, toY)) * length + fromY;
    };
    /** 弧度方向 点 */
    Mathf.radianPointX = function (radian, length, fromX) {
        return Math.cos(radian) * length + fromX;
    };
    Mathf.radianPointY = function (radian, length, fromY) {
        return Math.sin(radian) * length + fromY;
    };
    /** 弧度方向 点 */
    Mathf.anglePointX = function (angle, length, fromX) {
        return Math.cos(this.angleToRadian(angle)) * length + fromX;
    };
    Mathf.anglePointY = function (angle, length, fromY) {
        return Math.sin(this.angleToRadian(angle)) * length + fromY;
    };
    /** 角度方向 点 */
    Mathf.PointAngle = function (o, angle, length) {
        return this.PointRadian(o, this.angleToRadian(angle), length);
    };
    Mathf.PointRadian = function (o, radian, length) {
        var p = new Laya.Point();
        p.x = o.x + Math.sin(radian) * length;
        p.y = o.y + Math.cos(radian) * length;
        return p;
    };
    /** 点到直线的距离 */
    Mathf.distancePointToLine = function (point, lineFrom, lineTo) {
        var ab = new Vector3();
        Vector3.subtract(lineTo, lineFrom, ab);
        var ac = point;
        var cross = new Vector3();
        Vector3.cross(ab, ac, cross);
        Vector3.distanceSquared(Vector3.ZERO, cross);
        var wd = Vector3.distanceSquared(Vector3.ZERO, cross) /
            Vector3.distanceSquared(Vector3.ZERO, ab);
        return wd;
    };
    /** 直线与圆相交。圆半径和直线的相交点 */
    Mathf.IntersectionPoint = function (point, hit, radius, lineFrom, lineTo) {
        var c = radius;
        var a = this.distancePointToLine(point, lineFrom, lineTo);
        var b = Math.sqrt(c * c - a * a);
        var sub = new Vector3();
        Vector3.subtract(lineTo, lineFrom, sub);
        var normalized = new Vector3();
        Vector3.normalize(sub, normalized);
        var mul = new Vector3();
        Vector3.scale(normalized, b, mul);
        var add = new Vector3();
        Vector3.add(hit, mul, add);
        return add;
    };
    /** 点到直线的垂直线和直线的相交点 */
    Mathf.IntersectionPoint2 = function (point, lineFrom, lineTo) {
        var line = new Vector3();
        Vector3.subtract(lineTo, lineFrom, line);
        var normalized = new Vector3();
        Vector3.normalize(line, normalized);
        var sub = new Vector3();
        Vector3.subtract(point, lineFrom, sub);
        var dot = Vector3.dot(sub, line);
        var mul = new Vector3();
        Vector3.scale(normalized, dot, mul);
        var add = new Vector3();
        Vector3.add(lineFrom, mul, add);
        return add;
    };
    return Mathf;
}());
exports.default = Mathf;
},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var ChartPolygonPropertyView_1 = require("./Libs/ChartPolygonPropertyView/ChartPolygonPropertyView");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
        var chart = new ChartPolygonPropertyView_1.default();
        chart.x = Laya.stage.width >> 1;
        chart.y = Laya.stage.height * 0.5;
        Laya.stage.addChild(chart);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        // GameConfig.startScene && Laya.Scene.open(GameConfig.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1,"./Libs/ChartPolygonPropertyView/ChartPolygonPropertyView":2}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 子弹脚本，实现子弹飞行逻辑及对象池回收机制
 */
var Bullet = /** @class */ (function (_super) {
    __extends(Bullet, _super);
    function Bullet() {
        return _super.call(this) || this;
    }
    Bullet.prototype.onEnable = function () {
        //设置初始速度
        var rig = this.owner.getComponent(Laya.RigidBody);
        rig.setVelocity({ x: 0, y: -10 });
    };
    Bullet.prototype.onTriggerEnter = function (other, self, contact) {
        //如果被碰到，则移除子弹
        this.owner.removeSelf();
    };
    Bullet.prototype.onUpdate = function () {
        //如果子弹超出屏幕，则移除子弹
        if (this.owner.y < -10) {
            this.owner.removeSelf();
        }
    };
    Bullet.prototype.onDisable = function () {
        //子弹被移除时，回收子弹到对象池，方便下次复用，减少对象创建开销
        Laya.Pool.recover("bullet", this.owner);
    };
    return Bullet;
}(Laya.Script));
exports.default = Bullet;
},{}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameUI_1 = require("./GameUI");
/**
 * 掉落盒子脚本，实现盒子碰撞及回收流程
 */
var DropBox = /** @class */ (function (_super) {
    __extends(DropBox, _super);
    function DropBox() {
        var _this = _super.call(this) || this;
        /**盒子等级 */
        _this.level = 1;
        return _this;
    }
    DropBox.prototype.onEnable = function () {
        /**获得组件引用，避免每次获取组件带来不必要的查询开销 */
        this._rig = this.owner.getComponent(Laya.RigidBody);
        this.level = Math.round(Math.random() * 5) + 1;
        this._text = this.owner.getChildByName("levelTxt");
        this._text.text = this.level + "";
    };
    DropBox.prototype.onUpdate = function () {
        //让持续盒子旋转
        this.owner.rotation++;
    };
    DropBox.prototype.onTriggerEnter = function (other, self, contact) {
        var owner = this.owner;
        if (other.label === "buttle") {
            //碰撞到子弹后，增加积分，播放声音特效
            if (this.level > 1) {
                this.level--;
                this._text.changeText(this.level + "");
                owner.getComponent(Laya.RigidBody).setVelocity({ x: 0, y: -10 });
                Laya.SoundManager.playSound("sound/hit.wav");
            }
            else {
                if (owner.parent) {
                    var effect = Laya.Pool.getItemByCreateFun("effect", this.createEffect, this);
                    effect.pos(owner.x, owner.y);
                    owner.parent.addChild(effect);
                    effect.play(0, true);
                    owner.removeSelf();
                    Laya.SoundManager.playSound("sound/destroy.wav");
                }
            }
            GameUI_1.default.instance.addScore(1);
        }
        else if (other.label === "ground") {
            //只要有一个盒子碰到地板，则停止游戏
            owner.removeSelf();
            GameUI_1.default.instance.stopGame();
        }
    };
    /**使用对象池创建爆炸动画 */
    DropBox.prototype.createEffect = function () {
        var ani = new Laya.Animation();
        ani.loadAnimation("test/TestAni.ani");
        ani.on(Laya.Event.COMPLETE, null, recover);
        function recover() {
            ani.removeSelf();
            Laya.Pool.recover("effect", ani);
        }
        return ani;
    };
    DropBox.prototype.onDisable = function () {
        //盒子被移除时，回收盒子到对象池，方便下次复用，减少对象创建开销。
        Laya.Pool.recover("dropBox", this.owner);
    };
    return DropBox;
}(Laya.Script));
exports.default = DropBox;
},{"./GameUI":10}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 游戏控制脚本。定义了几个dropBox，bullet，createBoxInterval等变量，能够在IDE显示及设置该变量
 * 更多类型定义，请参考官方文档
 */
var GameControl = /** @class */ (function (_super) {
    __extends(GameControl, _super);
    function GameControl() {
        var _this = _super.call(this) || this;
        /** @prop {name:createBoxInterval,tips:"间隔多少毫秒创建一个下跌的容器",type:int,default:1000}*/
        _this.createBoxInterval = 1000;
        /**开始时间*/
        _this._time = 0;
        /**是否已经开始游戏 */
        _this._started = false;
        return _this;
    }
    GameControl.prototype.onEnable = function () {
        this._time = Date.now();
        this._gameBox = this.owner.getChildByName("gameBox");
        this.createBox();
    };
    GameControl.prototype.onUpdate = function () {
        //每间隔一段时间创建一个盒子
        var now = Date.now();
        if (now - this._time > this.createBoxInterval) {
            this._time = now;
            this.createBox();
        }
    };
    GameControl.prototype.createBox = function () {
        //使用对象池创建盒子
        var box = Laya.Pool.getItemByCreateFun("dropBox", this.dropBox.create, this.dropBox);
        box.pos(Math.random() * (Laya.stage.width - 100), -100);
        this._gameBox.addChild(box);
    };
    GameControl.prototype.onStageClick = function (e) {
        //停止事件冒泡，提高性能，当然也可以不要
        e.stopPropagation();
        //舞台被点击后，使用对象池创建子弹
        var flyer = Laya.Pool.getItemByCreateFun("bullet", this.bullet.create, this.bullet);
        flyer.pos(Laya.stage.mouseX, Laya.stage.mouseY);
        this._gameBox.addChild(flyer);
    };
    /**开始游戏，通过激活本脚本方式开始游戏*/
    GameControl.prototype.startGame = function () {
        if (!this._started) {
            this._started = true;
            this.enabled = true;
        }
    };
    /**结束游戏，通过非激活本脚本停止游戏 */
    GameControl.prototype.stopGame = function () {
        this._started = false;
        this.enabled = false;
        this.createBoxInterval = 1000;
        this._gameBox.removeChildren();
    };
    return GameControl;
}(Laya.Script));
exports.default = GameControl;
},{}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../ui/layaMaxUI");
var GameControl_1 = require("./GameControl");
/**
 * 本示例采用非脚本的方式实现，而使用继承页面基类，实现页面逻辑。在IDE里面设置场景的Runtime属性即可和场景进行关联
 * 相比脚本方式，继承式页面类，可以直接使用页面定义的属性（通过IDE内var属性定义），比如this.tipLbll，this.scoreLbl，具有代码提示效果
 * 建议：如果是页面级的逻辑，需要频繁访问页面内多个元素，使用继承式写法，如果是独立小模块，功能单一，建议用脚本方式实现，比如子弹脚本。
 */
var GameUI = /** @class */ (function (_super) {
    __extends(GameUI, _super);
    function GameUI() {
        var _this = _super.call(this) || this;
        GameUI.instance = _this;
        //关闭多点触控，否则就无敌了
        Laya.MouseManager.multiTouchEnabled = false;
        return _this;
    }
    GameUI.prototype.onEnable = function () {
        this._control = this.getComponent(GameControl_1.default);
        //点击提示文字，开始游戏
        this.tipLbll.on(Laya.Event.CLICK, this, this.onTipClick);
    };
    GameUI.prototype.onTipClick = function (e) {
        this.tipLbll.visible = false;
        this._score = 0;
        this.scoreLbl.text = "";
        this._control.startGame();
    };
    /**增加分数 */
    GameUI.prototype.addScore = function (value) {
        if (value === void 0) { value = 1; }
        this._score += value;
        this.scoreLbl.changeText("分数：" + this._score);
        //随着分数越高，难度增大
        if (this._control.createBoxInterval > 600 && this._score % 20 == 0)
            this._control.createBoxInterval -= 20;
    };
    /**停止游戏 */
    GameUI.prototype.stopGame = function () {
        this.tipLbll.visible = true;
        this.tipLbll.text = "游戏结束了，点击屏幕重新开始";
        this._control.stopGame();
    };
    return GameUI;
}(layaMaxUI_1.ui.test.TestSceneUI));
exports.default = GameUI;
},{"./../ui/layaMaxUI":11,"./GameControl":9}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var ui;
(function (ui) {
    var test;
    (function (test) {
        var TestSceneUI = /** @class */ (function (_super) {
            __extends(TestSceneUI, _super);
            function TestSceneUI() {
                return _super.call(this) || this;
            }
            TestSceneUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("test/TestScene");
            };
            return TestSceneUI;
        }(Scene));
        test.TestSceneUI = TestSceneUI;
    })(test = ui.test || (ui.test = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[6])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL1Byb2dyYW0gRmlsZXMvTGF5YUFpcklERTIuMC9yZXNvdXJjZXMvYXBwL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvR2FtZUNvbmZpZy50cyIsInNyYy9MaWJzL0NoYXJ0UG9seWdvblByb3BlcnR5Vmlldy9DaGFydFBvbHlnb25Qcm9wZXJ0eVZpZXcudHMiLCJzcmMvTGlicy9DaGFydFBvbHlnb25Qcm9wZXJ0eVZpZXcvUHJvcC50cyIsInNyYy9MaWJzL0hlbHBlcnMvUmFuZG9tLnRzIiwic3JjL0xpYnMvTWF0aGYudHMiLCJzcmMvTWFpbi50cyIsInNyYy9zY3JpcHQvQnVsbGV0LnRzIiwic3JjL3NjcmlwdC9Ecm9wQm94LnRzIiwic3JjL3NjcmlwdC9HYW1lQ29udHJvbC50cyIsInNyYy9zY3JpcHQvR2FtZVVJLnRzIiwic3JjL3VpL2xheWFNYXhVSS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNWQSxnR0FBZ0c7QUFDaEcsMENBQW9DO0FBQ3BDLG9EQUE4QztBQUM5QywwQ0FBb0M7QUFDcEMsNENBQXNDO0FBQ3RDOztFQUVFO0FBQ0Y7SUFXSTtJQUFjLENBQUM7SUFDUixlQUFJLEdBQVg7UUFDSSxJQUFJLEdBQUcsR0FBYSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztRQUM3QyxHQUFHLENBQUMsa0JBQWtCLEVBQUMsZ0JBQU0sQ0FBQyxDQUFDO1FBQy9CLEdBQUcsQ0FBQyx1QkFBdUIsRUFBQyxxQkFBVyxDQUFDLENBQUM7UUFDekMsR0FBRyxDQUFDLGtCQUFrQixFQUFDLGdCQUFNLENBQUMsQ0FBQztRQUMvQixHQUFHLENBQUMsbUJBQW1CLEVBQUMsaUJBQU8sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFqQk0sZ0JBQUssR0FBUSxHQUFHLENBQUM7SUFDakIsaUJBQU0sR0FB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QUFWRCxXQUFjLEVBQUU7SUFBQyxJQUFBLElBQUksQ0FVcEI7SUFWZ0IsV0FBQSxJQUFJO1FBQ2pCO1lBQWlDLCtCQUFLO1lBR2xDO3VCQUFlLGlCQUFPO1lBQUEsQ0FBQztZQUN2QixvQ0FBYyxHQUFkO2dCQUNJLGlCQUFNLGNBQWMsV0FBRSxDQUFDO2dCQUN2QixJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDckMsQ0FBQztZQUNMLGtCQUFDO1FBQUQsQ0FSQSxBQVFDLENBUmdDLEtBQUssR0FRckM7UUFSWSxnQkFBVyxjQVF2QixDQUFBO0lBQ0wsQ0FBQyxFQVZnQixJQUFJLEdBQUosT0FBSSxLQUFKLE9BQUksUUFVcEI7QUFBRCxDQUFDLEVBVmEsRUFBRSxHQUFGLFVBQUUsS0FBRixVQUFFLFFBVWYiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG4oZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiLyoqVGhpcyBjbGFzcyBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSBMYXlhQWlySURFLCBwbGVhc2UgZG8gbm90IG1ha2UgYW55IG1vZGlmaWNhdGlvbnMuICovXHJcbmltcG9ydCBHYW1lVUkgZnJvbSBcIi4vc2NyaXB0L0dhbWVVSVwiXHJcbmltcG9ydCBHYW1lQ29udHJvbCBmcm9tIFwiLi9zY3JpcHQvR2FtZUNvbnRyb2xcIlxyXG5pbXBvcnQgQnVsbGV0IGZyb20gXCIuL3NjcmlwdC9CdWxsZXRcIlxyXG5pbXBvcnQgRHJvcEJveCBmcm9tIFwiLi9zY3JpcHQvRHJvcEJveFwiXHJcbi8qXHJcbiog5ri45oiP5Yid5aeL5YyW6YWN572uO1xyXG4qL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lQ29uZmlne1xyXG4gICAgc3RhdGljIHdpZHRoOm51bWJlcj03MjA7XHJcbiAgICBzdGF0aWMgaGVpZ2h0Om51bWJlcj0xMjgwO1xyXG4gICAgc3RhdGljIHNjYWxlTW9kZTpzdHJpbmc9TGF5YS5TdGFnZS5TQ0FMRV9TSE9XQUxMO1xyXG4gICAgc3RhdGljIHNjcmVlbk1vZGU6c3RyaW5nPVwibm9uZVwiO1xyXG4gICAgc3RhdGljIHN0YXJ0U2NlbmU6c3RyaW5nPVwidGVzdC9UZXN0U2NlbmUuc2NlbmVcIjtcclxuICAgIHN0YXRpYyBzY2VuZVJvb3Q6c3RyaW5nPVwiXCI7XHJcbiAgICBzdGF0aWMgZGVidWc6Ym9vbGVhbj1mYWxzZTtcclxuICAgIHN0YXRpYyBzdGF0OmJvb2xlYW49ZmFsc2U7XHJcbiAgICBzdGF0aWMgcGh5c2ljc0RlYnVnOmJvb2xlYW49ZmFsc2U7XHJcbiAgICBzdGF0aWMgZXhwb3J0U2NlbmVUb0pzb246Ym9vbGVhbj10cnVlO1xyXG4gICAgY29uc3RydWN0b3IoKXt9XHJcbiAgICBzdGF0aWMgaW5pdCgpe1xyXG4gICAgICAgIHZhciByZWc6IEZ1bmN0aW9uID0gTGF5YS5DbGFzc1V0aWxzLnJlZ0NsYXNzO1xyXG4gICAgICAgIHJlZyhcInNjcmlwdC9HYW1lVUkudHNcIixHYW1lVUkpO1xyXG4gICAgICAgIHJlZyhcInNjcmlwdC9HYW1lQ29udHJvbC50c1wiLEdhbWVDb250cm9sKTtcclxuICAgICAgICByZWcoXCJzY3JpcHQvQnVsbGV0LnRzXCIsQnVsbGV0KTtcclxuICAgICAgICByZWcoXCJzY3JpcHQvRHJvcEJveC50c1wiLERyb3BCb3gpO1xyXG4gICAgfVxyXG59XHJcbkdhbWVDb25maWcuaW5pdCgpOyIsImltcG9ydCBQcm9wIGZyb20gXCIuL1Byb3BcIjtcclxuaW1wb3J0IE1hdGhmIGZyb20gXCIuLi9NYXRoZlwiO1xyXG5pbXBvcnQgUG9pbnQgPSBMYXlhLlBvaW50O1xyXG5pbXBvcnQgUmFuZG9tIGZyb20gXCIuLi9IZWxwZXJzL1JhbmRvbVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhcnRQb2x5Z29uUHJvcGVydHlWaWV3IGV4dGVuZHMgTGF5YS5TcHJpdGVcclxue1xyXG4gICAgLyoqIOWxnuaAp+aVsOaNriAqL1xyXG4gICAgZGF0YTogUHJvcFtdID0gW107XHJcbiAgICAvKiog5pWw5o2uIOacgOWQjue7mOWItueahCAqL1xyXG4gICAgcHJpdmF0ZSBsYXN0RGF0YTogUHJvcFtdID0gW107XHJcbiAgICAvKiog5pWw5o2uIOW9k+WJjee7mOWItueahCAqL1xyXG4gICAgcHJpdmF0ZSBwcm9wczogUHJvcFtdID0gW107XHJcbiAgICBcclxuICAgIC8qKiDngrkgKi9cclxuICAgIHByaXZhdGUgcG9pbnRzOiBMYXlhLlBvaW50W10gPSBbXTtcclxuXHJcbiAgICAvKiog5Lit5b+D54K5ICovXHJcbiAgICBjZW50ZXI6IFBvaW50ID0gbmV3IFBvaW50KCk7XHJcblxyXG5cclxuICAgIC8qKiDop5LluqblgY/ov5wgKi9cclxuICAgIGFuZ2xlT2Zmc2V0ID0gLTE1O1xyXG4gICAgLyoqIOacgOWkp+WNiuW+hCAqL1xyXG4gICAgcmFkaXVzOiBudW1iZXIgPSAyMDA7XHJcbiAgICAvKiog5YC85pyA5aSn5Y2K5b6E5q+U5L6LICovXHJcbiAgICByYWRpdXNWYWx1ZVJhdGU6IG51bWJlciA9IDE7XHJcbiAgICAvKiog5paH5pys5Y2K5b6E5q+U5L6LICovXHJcbiAgICByYWRpdXNUZXh0UmF0ZTogbnVtYmVyID0gMS4yO1xyXG5cclxuICAgIC8qKiDliLvluqblh6DnrYnliIYgKi9cclxuICAgIG1hcms6IG51bWJlciA9IDM7XHJcblxyXG4gICAgbWFya1JhZGl1c1JhdGU6IG51bWJlcltdID0gWzEsICAwLjcsIDAuNF07XHJcbiAgICBtYXJrRmlsbENvbG9yczogc3RyaW5nW10gPSBbJyM5ZTk3ZGFGRicsICcjOGM4NGRiRkYnLCAnIzdiNzFkYkZGJ107XHJcbiAgICBtYXJrTGluZUNvbG9yczogc3RyaW5nW10gPSBbJyNGRkZGRkYzMycsICcjYmNiNmVkRkYnLCAnI2JjYjZlZEZGJ107XHJcbiAgICBtYXJrTGluZVdpZHRoczogbnVtYmVyW10gPSBbNiwgMiwgMl07XHJcbiAgICBsaW5lQ29sb3IgPSAnI2JjYjZlZEZGJztcclxuICAgIGxpbmVXaWR0aCA9IDY7XHJcbiAgICBmaWxsQ29sb3IgPSAnI0ZGRkZGRjY2J1xyXG4gICAgcG9pbnRTaXplID0gNjtcclxuICAgIHBvaW50Q29sb3IgPSAnI2I4ZjBkMEZGJztcclxuICAgIHZhbHVlRmlsbENvbG9yID0gJyNiOGYwZDA2Nic7XHJcbiAgICB2YWx1ZUxpbmVDb2xvciA9ICcjYjhmMGQwRkYnO1xyXG4gICAgdmFsdWVMaW5lV2lkdGggPSAyO1xyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpXHJcbiAgICB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB3aW5kb3dbJ2MnXSA9IHRoaXM7XHJcblxyXG4gICAgICAgIHRoaXMudGVzdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHRlc3RNaW4gPSAxMDA7XHJcbiAgICB0ZXN0TWF4ID0gNTAwO1xyXG5cclxuICAgIHRlc3QoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMudGVzdERhdGEoKTtcclxuICAgICAgICBMYXlhLnN0YWdlLm9uKExheWEuRXZlbnQuQ0xJQ0ssIHRoaXMsIHRoaXMudGVzdERhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHRlc3REYXRhKClcclxuICAgIHtcclxuICAgICAgICB0aGlzLmRhdGEubGVuZ3RoID0gMDtcclxuICAgICAgICBsZXQgcHJvcDtcclxuICAgICAgICBwcm9wID0gbmV3IFByb3AoKTtcclxuICAgICAgICBwcm9wLmlkID0gMTtcclxuICAgICAgICBwcm9wLnZhbCA9IFJhbmRvbS5yYW5nZSh0aGlzLnRlc3RNaW4sIHRoaXMudGVzdE1heCk7XHJcbiAgICAgICAgcHJvcC5uYW1lID0gXCLlj6PmiY1cIlxyXG4gICAgICAgIHRoaXMuZGF0YS5wdXNoKHByb3ApO1xyXG5cclxuICAgICAgICBcclxuICAgICAgICBwcm9wID0gbmV3IFByb3AoKTtcclxuICAgICAgICBwcm9wLmlkID0gMjtcclxuICAgICAgICBwcm9wLnZhbCA9IFJhbmRvbS5yYW5nZSh0aGlzLnRlc3RNaW4sIHRoaXMudGVzdE1heCk7XHJcbiAgICAgICAgcHJvcC5uYW1lID0gXCLlqLHkuZBcIlxyXG4gICAgICAgIHRoaXMuZGF0YS5wdXNoKHByb3ApO1xyXG5cclxuICAgICAgICBcclxuICAgICAgICBwcm9wID0gbmV3IFByb3AoKTtcclxuICAgICAgICBwcm9wLmlkID0gMztcclxuICAgICAgICBwcm9wLnZhbCA9IFJhbmRvbS5yYW5nZSh0aGlzLnRlc3RNaW4sIHRoaXMudGVzdE1heCk7XHJcbiAgICAgICAgcHJvcC5uYW1lID0gXCLooajmvJRcIlxyXG4gICAgICAgIHRoaXMuZGF0YS5wdXNoKHByb3ApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHByb3AgPSBuZXcgUHJvcCgpO1xyXG4gICAgICAgIHByb3AuaWQgPSA0O1xyXG4gICAgICAgIHByb3AudmFsID0gUmFuZG9tLnJhbmdlKHRoaXMudGVzdE1pbiwgdGhpcy50ZXN0TWF4KTtcclxuICAgICAgICBwcm9wLm5hbWUgPSBcIuaJjeiJulwiXHJcbiAgICAgICAgdGhpcy5kYXRhLnB1c2gocHJvcCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcHJvcCA9IG5ldyBQcm9wKCk7XHJcbiAgICAgICAgcHJvcC5pZCA9IDU7XHJcbiAgICAgICAgcHJvcC52YWwgPSBSYW5kb20ucmFuZ2UodGhpcy50ZXN0TWluLCB0aGlzLnRlc3RNYXgpO1xyXG4gICAgICAgIHByb3AubmFtZSA9IFwi6a2F5YqbXCJcclxuICAgICAgICB0aGlzLmRhdGEucHVzaChwcm9wKTtcclxuICAgICAgICB0aGlzLnNldERhdGEodGhpcy5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGlzRmlyc3QgPSB0cnVlO1xyXG4gICAgLyoqIOiuvue9ruaVsOaNriAqL1xyXG4gICAgc2V0RGF0YShwcm9wczogUHJvcFtdKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IHByb3BzO1xyXG5cclxuICAgICAgICBpZih0aGlzLmRhdGEubGVuZ3RoICE9IHRoaXMucHJvcHMubGVuZ3RoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSArKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoaSA8IHRoaXMucHJvcHMubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHNbaV0uY29weVZhbHVlKHByb3BzW2ldKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5wdXNoKHByb3BzW2ldLmNsb25lKCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZih0aGlzLmRhdGEubGVuZ3RoICE9IHRoaXMubGFzdERhdGEubGVuZ3RoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSArKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoaSA8IHRoaXMubGFzdERhdGEubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdERhdGFbaV0uY29weVZhbHVlKHByb3BzW2ldKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0RGF0YS5wdXNoKHByb3BzW2ldLmNsb25lKCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZih0aGlzLmlzRmlyc3QpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmRyYXcoKTtcclxuICAgICAgICAgICAgdGhpcy5pc0ZpcnN0ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdGhpcy50d2VlbkRyYXcoKTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIHB1YmxpYyB0d2VlbkR1cmF0aW9uID0gMTAwMDtcclxuICAgIHByaXZhdGUgdHdlZW5NYXggPSAxMDA7XHJcbiAgICBwcml2YXRlIF90d2VlbkluZGV4ID0gMDtcclxuXHJcbiAgICBwcml2YXRlICBnZXQgdHdlZW5JbmRleCgpOiBudW1iZXJcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdHdlZW5JbmRleCA7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXQgdHdlZW5JbmRleCh2YWw6IG51bWJlcilcclxuICAgIHtcclxuICAgICAgICB0aGlzLl90d2VlbkluZGV4ID0gdmFsO1xyXG4gICAgICAgIGxldCBjb3VudCA9IHRoaXMucHJvcHMubGVuZ3RoO1xyXG4gICAgICAgIGxldCBwcm9wOiBQcm9wO1xyXG4gICAgICAgIGxldCByYXRlID0gdGhpcy5fdHdlZW5JbmRleCAvIHRoaXMudHdlZW5NYXg7XHJcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGNvdW50OyBpICsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcHJvcCA9IHRoaXMucHJvcHNbaV07XHJcbiAgICAgICAgICAgIHByb3AudmFsID0gIExheWEuTWF0aFV0aWwubGVycCh0aGlzLmxhc3REYXRhW2ldLnZhbCwgdGhpcy5kYXRhW2ldLnZhbCwgcmF0ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZihyYXRlID49IDEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5sYXN0RGF0YS5sZW5ndGg7IGkgKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGFzdERhdGFbaV0udmFsID0gdGhpcy5kYXRhW2ldLnZhbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRyYXcoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog57yT5Yqo57uY5Yi2ICovXHJcbiAgICB0d2VlbkRyYXcoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMudHdlZW5JbmRleCA9IDA7XHJcbiAgICAgICAgTGF5YS5Ud2Vlbi5jbGVhckFsbCh0aGlzKTtcclxuICAgICAgICBMYXlhLlR3ZWVuLnRvKHRoaXMsIHt0d2VlbkluZGV4OiB0aGlzLnR3ZWVuTWF4fSwgdGhpcy50d2VlbkR1cmF0aW9uLCBMYXlhLkVhc2UubGluZWFyTm9uZSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKiDnu5jliLYgKi9cclxuICAgIGRyYXcoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MuY2xlYXIoKTtcclxuICAgICAgICAvLyDnu5jliLbliLvluqZcclxuICAgICAgICBmb3IobGV0IGkgPTA7IGkgPCB0aGlzLm1hcms7IGkgKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdNYXJrKHRoaXMubWFya1JhZGl1c1JhdGVbaV0gKiB0aGlzLnJhZGl1cywgdGhpcy5tYXJrRmlsbENvbG9yc1tpXSwgdGhpcy5tYXJrTGluZUNvbG9yc1tpXSwgdGhpcy5tYXJrTGluZVdpZHRoc1tpXSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgLy8g57uY5Yi257uP57q/XHJcbiAgICAgICAgdGhpcy5kcmF3TG9uZ2l0dWRlKCk7XHJcblxyXG4gICAgICAgIC8vIOe7mOWItuWAvFxyXG4gICAgICAgIHRoaXMuZHJhd1ZhbHVlKCk7XHJcblxyXG4gICAgICAgIC8vIOe7mOWItuaWh+acrFxyXG4gICAgICAgIHRoaXMuZHJhd1RleHQoKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOiuoeeul+eCuSAqL1xyXG4gICAgY2FsY3VsYXRpb25Qb2ludHMocmFkaXVzPzogbnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIGlmKCFyYWRpdXMgfHwgcmFkaXVzIDw9IDApXHJcbiAgICAgICAgICAgIHJhZGl1cyA9IHRoaXMucmFkaXVzO1xyXG5cclxuICAgICAgICBsZXQgY291bnQgPSB0aGlzLnByb3BzLmxlbmd0aDtcclxuICAgICAgICBsZXQgYXZlcmFnZUFuZ2xlID0gMzYwIC8gY291bnQ7XHJcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGNvdW50OyBpICsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IGFuZ2xlID0gdGhpcy5hbmdsZU9mZnNldCArIGF2ZXJhZ2VBbmdsZSAqIGk7XHJcblxyXG4gICAgICAgICAgICBsZXQgcG9pbnQ6IFBvaW50O1xyXG4gICAgICAgICAgICBpZihpIDwgdGhpcy5wb2ludHMubGVuZ3RoKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwb2ludCA9IHRoaXMucG9pbnRzW2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcG9pbnQgPSBuZXcgUG9pbnQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRzLnB1c2gocG9pbnQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBwb2ludC54ID0gTWF0aGYuYW5nbGVQb2ludFgoYW5nbGUsIHJhZGl1cywgdGhpcy5jZW50ZXIueCk7XHJcbiAgICAgICAgICAgIHBvaW50LnkgPSBNYXRoZi5hbmdsZVBvaW50WShhbmdsZSwgcmFkaXVzLCB0aGlzLmNlbnRlci55KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOe7mOWItuaWh+acrCAqL1xyXG4gICAgcHJpdmF0ZSBkcmF3VGV4dCgpXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IGNvdW50ID0gdGhpcy5wcm9wcy5sZW5ndGg7XHJcbiAgICAgICAgdGhpcy5jYWxjdWxhdGlvblBvaW50cygpO1xyXG4gICAgfVxyXG5cclxuICAgIFxyXG4gICAgLyoqIOe7mOWItuWAvCAqL1xyXG4gICAgcHJpdmF0ZSBkcmF3VmFsdWUoKVxyXG4gICAge1xyXG4gICAgICAgIGxldCBjb3VudCA9IHRoaXMucHJvcHMubGVuZ3RoO1xyXG4gICAgICAgIGxldCBhdmVyYWdlQW5nbGUgPSAzNjAgLyBjb3VudDtcclxuXHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IG1heFByb3BWYWwgPSAwO1xyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSArKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG1heFByb3BWYWwgPSBNYXRoLm1heCh0aGlzLnByb3BzW2ldLnZhbCwgbWF4UHJvcFZhbCk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgICAgIGxldCBwb2ludDogUG9pbnQ7XHJcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGNvdW50OyBpICsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IGFuZ2xlID0gdGhpcy5hbmdsZU9mZnNldCArIGF2ZXJhZ2VBbmdsZSAqIGk7XHJcblxyXG4gICAgICAgICAgICBpZihpIDwgdGhpcy5wb2ludHMubGVuZ3RoKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwb2ludCA9IHRoaXMucG9pbnRzW2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcG9pbnQgPSBuZXcgUG9pbnQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRzLnB1c2gocG9pbnQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgcmFkaXVzID0gbWF4UHJvcFZhbCA8PSAwID8gMCA6IHRoaXMucHJvcHNbaV0udmFsIC8gIG1heFByb3BWYWwgKiB0aGlzLnJhZGl1c1ZhbHVlUmF0ZSAqIHRoaXMucmFkaXVzO1xyXG5cclxuICAgICAgICAgICAgcG9pbnQueCA9IE1hdGhmLmFuZ2xlUG9pbnRYKGFuZ2xlLCByYWRpdXMsIHRoaXMuY2VudGVyLngpO1xyXG4gICAgICAgICAgICBwb2ludC55ID0gTWF0aGYuYW5nbGVQb2ludFkoYW5nbGUsIHJhZGl1cywgdGhpcy5jZW50ZXIueSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgcG9pbnRBcnJheSA9IHRoaXMucG9pbnRzVG9BcnJheSh0aGlzLnBvaW50cywgY291bnQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOe7mOWItuWkmui+ueW9olxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MuZHJhd1BvbHkodGhpcy5jZW50ZXIueCwgdGhpcy5jZW50ZXIueSwgcG9pbnRBcnJheSwgdGhpcy52YWx1ZUZpbGxDb2xvciwgdGhpcy52YWx1ZUxpbmVDb2xvciwgdGhpcy52YWx1ZUxpbmVXaWR0aCk7XHJcblxyXG4gICAgICAgIC8vIOe7mOWItueCuVxyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSArKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHBvaW50ID0gdGhpcy5wb2ludHNbaV07XHJcbiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3MuZHJhd0NpcmNsZShwb2ludC54LCBwb2ludC55LCB0aGlzLnBvaW50U2l6ZSwgdGhpcy5wb2ludENvbG9yKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKiDnu5jliLbnu4/nur8gKi9cclxuICAgIGRyYXdMb25naXR1ZGUoKVxyXG4gICAge1xyXG4gICAgICAgIGxldCBjb3VudCA9IHRoaXMucHJvcHMubGVuZ3RoO1xyXG4gICAgICAgIHRoaXMuY2FsY3VsYXRpb25Qb2ludHModGhpcy5yYWRpdXMpO1xyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSArKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBwb2ludDogUG9pbnQgPSB0aGlzLnBvaW50c1tpXTtcclxuICAgICAgICAgICAgdGhpcy5ncmFwaGljcy5kcmF3TGluZSh0aGlzLmNlbnRlci54LCB0aGlzLmNlbnRlci55LCBwb2ludC54LCBwb2ludC55LCB0aGlzLmxpbmVDb2xvciwgdGhpcy5saW5lV2lkdGgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog57uY5Yi25Yi75bqmICovXHJcbiAgICBwcml2YXRlIGRyYXdNYXJrKHJhZGl1czogbnVtYmVyLCBmaWxsQ29sb3I6IGFueSwgbGluZUNvbG9yPzogYW55LCBsaW5lV2lkdGg/OiBudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IGNvdW50ID0gdGhpcy5wcm9wcy5sZW5ndGg7XHJcbiAgICAgICAgdGhpcy5jYWxjdWxhdGlvblBvaW50cyhyYWRpdXMpO1xyXG5cclxuICAgICAgICBsZXQgcG9pbnRBcnJheSA9IHRoaXMucG9pbnRzVG9BcnJheSh0aGlzLnBvaW50cywgY291bnQpO1xyXG5cclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmRyYXdQb2x5KHRoaXMuY2VudGVyLngsIHRoaXMuY2VudGVyLnksIHBvaW50QXJyYXksIGZpbGxDb2xvciwgbGluZUNvbG9yLCBsaW5lV2lkdGgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcG9pbnRzVG9BcnJheShwb2ludHM6IFBvaW50W10sIGNvdW50PzogbnVtYmVyKTogbnVtYmVyW11cclxuICAgIHtcclxuICAgICAgICAoY291bnQgPT09IHZvaWQgMCkgJiYgKGNvdW50ID0gcG9pbnRzLmxlbmd0aCk7XHJcblxyXG4gICAgICAgIGNvdW50ID0gTWF0aC5taW4oY291bnQsIHRoaXMucG9pbnRzLmxlbmd0aCk7XHJcblxyXG4gICAgICAgIGxldCBhcnIgPSBbXTtcclxuICAgICAgICBhcnIubGVuZ3RoID0gMDtcclxuICAgICAgICBsZXQgcG9pbnQ6IFBvaW50O1xyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSArKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHBvaW50ID0gcG9pbnRzW2ldO1xyXG4gICAgICAgICAgICBhcnIucHVzaChwb2ludC54LCBwb2ludC55KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFycjtcclxuICAgIH1cclxuXHJcblxyXG59IiwiXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb3Bcclxue1xyXG4gICAgaWQ6IG51bWJlciA9IDA7XHJcbiAgICB2YWw6IG51bWJlciA9IDA7XHJcbiAgICBuYW1lOiBzdHJpbmcgPSBcIlwiO1xyXG5cclxuICAgIGNsb25lKCk6UHJvcFxyXG4gICAge1xyXG4gICAgICAgIGxldCBkID0gbmV3IFByb3AoKTtcclxuICAgICAgICBkLmlkID0gdGhpcy5pZDtcclxuICAgICAgICBkLnZhbCA9IHRoaXMudmFsO1xyXG4gICAgICAgIGQubmFtZSA9IHRoaXMubmFtZTtcclxuICAgICAgICByZXR1cm4gZDtcclxuICAgIH1cclxuXHJcbiAgICBjb3B5VmFsdWUocDogUHJvcCk6IFByb3BcclxuICAgIHtcclxuICAgICAgICB0aGlzLmlkID0gcC5pZDtcclxuICAgICAgICB0aGlzLnZhbCA9IHAudmFsO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IHAubmFtZTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFJhbmRvbVxyXG57XHJcblx0Ly8gaW50XHJcblx0Ly8gbWluIDw9IHIgPCBtYXhcclxuXHRzdGF0aWMgcmFuZ2UobWluOiBudW1iZXIsIG1heDogbnVtYmVyKVxyXG5cdHtcclxuXHRcdGxldCByYW5nZSA9IG1heCAtIG1pbjtcclxuXHRcdGxldCByYW5kID0gTWF0aC5yYW5kb20oKTtcclxuXHRcdHJldHVybiBtaW4gKyBNYXRoLmZsb29yKHJhbmdlICogcmFuZCk7XHJcblx0fVxyXG5cclxuXHQvLyBpbnRcclxuXHQvLyBtaW4gPD0gciA8PSBtYXhcclxuXHRzdGF0aWMgcmFuZ2VCb3RoKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcilcclxuXHR7XHJcblx0XHRsZXQgcmFuZ2UgPSBtYXggLSBtaW47XHJcblx0XHRsZXQgcmFuZCA9IE1hdGgucmFuZG9tKCk7XHJcblx0XHRyZXR1cm4gbWluICsgTWF0aC5yb3VuZChyYW5nZSAqIHJhbmQpO1xyXG5cdH1cclxuXHJcblx0Ly8gaW50XHJcblx0Ly8gbWluIDwgciA8IG1heFxyXG5cdHN0YXRpYyByYW5nZUJldHdlZW4obWluOiBudW1iZXIsIG1heDogbnVtYmVyKVxyXG5cdHtcclxuXHRcdGxldCByYW5nZSA9IG1heCAtIG1pbjtcclxuXHRcdGxldCByYW5kID0gTWF0aC5yYW5kb20oKTtcclxuXHRcdGlmIChNYXRoLnJvdW5kKHJhbmQgKiByYW5nZSkgPT0gMClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIG1pbiArIDE7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmIChNYXRoLnJvdW5kKHJhbmQgKiBtYXgpID09IG1heClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIG1heCAtIDE7XHJcblx0XHR9XHJcblx0XHRlbHNlXHJcblx0XHR7XHJcblx0XHRcdHJldHVybiBtaW4gKyBNYXRoLnJvdW5kKHJhbmQgKiByYW5nZSkgLSAxO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblxyXG5cdC8vLyA8c3VtbWFyeT5cclxuXHQvLy8g5Lmx5bqP5o6S5YiX5LiA5Liq5pWw57uEXHJcblx0Ly8vIDwvc3VtbWFyeT5cclxuXHRzdGF0aWMgR2V0RGlzb3JkZXJMaXN0PFQ+KGxpc3Q6IEFycmF5PFQ+KTogQXJyYXk8VD5cclxuXHR7XHJcblx0XHRsZXQgY291bnROdW0gPSBsaXN0Lmxlbmd0aDtcclxuXHRcdGxldCBsaXN0QSA9IG5ldyBBcnJheTxUPigpO1xyXG5cdFx0bGV0IGxpc3RCID0gbmV3IEFycmF5PFQ+KCk7XHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50TnVtOyBpKyspXHJcblx0XHR7XHJcblx0XHRcdGxpc3RBLnB1c2gobGlzdFtpXSk7XHJcblx0XHR9XHJcblx0XHR3aGlsZSAobGlzdEIubGVuZ3RoIDwgY291bnROdW0pXHJcblx0XHR7XHJcblx0XHRcdGxldCBpbmRleCA9IFJhbmRvbS5yYW5nZSgwLCBsaXN0QS5sZW5ndGgpO1xyXG5cdFx0XHRpZiAobGlzdEIuaW5kZXhPZihsaXN0QVtpbmRleF0pID09PSAtMSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGxpc3RCLnB1c2gobGlzdEFbaW5kZXhdKTtcclxuXHRcdFx0XHRsaXN0QS5zcGxpY2UoaW5kZXgsIDEpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gbGlzdEI7XHJcblx0fVxyXG5cclxufSIsImltcG9ydCBWZWN0b3IzID0gTGF5YS5WZWN0b3IzO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWF0aGZcclxue1xyXG5cdHN0YXRpYyBjbGFtcChudW06IG51bWJlciwgbWluOiBudW1iZXIsIG1heDogbnVtYmVyKVxyXG5cdHtcclxuXHRcdHJldHVybiBNYXRoLm1heChNYXRoLm1pbihudW0sIE1hdGgubWF4KG1pbiwgbWF4KSksIE1hdGgubWluKG1pbiwgbWF4KSk7XHJcblx0fVxyXG5cdHN0YXRpYyBDbGFtcDAxKHZhbHVlOiBudW1iZXIpOiBudW1iZXJcclxuXHR7XHJcblx0XHRpZiAodmFsdWUgPCAwLjApXHJcblx0XHRcdHJldHVybiAwLjA7XHJcblx0XHRpZiAodmFsdWUgPiAxLjApXHJcblx0XHRcdHJldHVybiAxO1xyXG5cdFx0cmV0dXJuIHZhbHVlO1xyXG5cdH1cclxuXHJcblxyXG5cdC8vLyA8c3VtbWFyeT5cclxuXHQvLy8gICA8cGFyYT5MaW5lYXJseSBpbnRlcnBvbGF0ZXMgYmV0d2VlbiBhIGFuZCBiIGJ5IHQuPC9wYXJhPlxyXG5cdC8vLyA8L3N1bW1hcnk+XHJcblx0Ly8vIDxwYXJhbSBuYW1lPVwiYVwiPjwvcGFyYW0+XHJcblx0Ly8vIDxwYXJhbSBuYW1lPVwiYlwiPjwvcGFyYW0+XHJcblx0Ly8vIDxwYXJhbSBuYW1lPVwidFwiPjwvcGFyYW0+XHJcblx0c3RhdGljIExlcnAoYTogbnVtYmVyLCBiOiBudW1iZXIsIHQ6IG51bWJlcik6IG51bWJlclxyXG5cdHtcclxuXHRcdHJldHVybiBhICsgKGIgLSBhKSAqIE1hdGhmLkNsYW1wMDEodCk7XHJcblx0fVxyXG5cclxuXHJcblxyXG5cdC8qKiDlvKfluqYsIOiuoeeulzLkuKrngrkgKi9cclxuXHRwdWJsaWMgc3RhdGljIHJhZGlhbihmcm9tWDogbnVtYmVyLCBmcm9tWTogbnVtYmVyLCB0b1g6IG51bWJlciwgdG9ZOiBudW1iZXIpOiBudW1iZXJcclxuXHR7XHJcblx0XHRsZXQgZHggPSB0b1ggLSBmcm9tWDtcclxuXHRcdGxldCBkeSA9IHRvWSAtIGZyb21ZO1xyXG5cdFx0cmV0dXJuIE1hdGguYXRhbjIoZHksIGR4KTtcclxuXHR9XHJcblxyXG5cdFxyXG5cdFx0XHJcblx0LyoqIOinkuW6piwg6K6h566XMuS4queCuSAqL1xyXG5cdHB1YmxpYyBzdGF0aWMgYW5nbGUoZnJvbVg6IG51bWJlciwgZnJvbVk6IG51bWJlciwgdG9YOiBudW1iZXIsIHRvWTogbnVtYmVyKTogbnVtYmVyXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMucmFkaWFuKGZyb21YLCBmcm9tWSwgdG9YLCB0b1kpICogMTgwIC8gTWF0aC5QSSA7XHJcblx0fVxyXG5cclxuXHRcclxuXHQvKiog6KeS5bqmIOi9rCDlvKfluqYgKi9cclxuXHRwdWJsaWMgc3RhdGljIGFuZ2xlVG9SYWRpYW4oYW5nbGU6IG51bWJlcik6IG51bWJlclxyXG5cdHtcclxuXHRcdHJldHVybiBhbmdsZSAqIE1hdGguUEkgLyAxODA7XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8qKiDlvKfluqYg6L2sIOinkuW6piAqL1xyXG5cdHB1YmxpYyBzdGF0aWMgcmFkaWFuVG9BbmdsZShyYWRpYW46IG51bWJlcik6IG51bWJlclxyXG5cdHtcclxuXHRcdHJldHVybiByYWRpYW4gKiAxODAgLyBNYXRoLlBJO1xyXG5cdH1cclxuXHRcclxuXHQvKiog6Led56a7LCDorqHnrpcy5Liq54K5ICovXHJcblx0cHVibGljIHN0YXRpYyBkaXN0YW5jZWFuZ2xlKGZyb21YOiBudW1iZXIsIGZyb21ZOiBudW1iZXIsIHRvWDogbnVtYmVyLCB0b1k6IG51bWJlcik6IG51bWJlclxyXG5cdHtcclxuXHRcdGxldCBkeCA9IHRvWCAtIGZyb21YO1xyXG5cdFx0bGV0IGR5ID0gdG9ZIC0gZnJvbVk7XHJcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcclxuXHR9XHJcblxyXG5cdC8qKiDmlrnlkJHlu7bov5/ngrkgKi9cclxuXHRwdWJsaWMgc3RhdGljIGRpcmVjdGlvblBvaW50KGZyb21YOiBudW1iZXIsIGZyb21ZOiBudW1iZXIsIHRvWDogbnVtYmVyLCB0b1k6IG51bWJlciwgIGxlbmd0aDpudW1iZXIpOiBMYXlhLlBvaW50XHJcblx0e1xyXG5cdFx0bGV0IGFuZ2xlID0gdGhpcy5yYWRpYW4oZnJvbVgsIGZyb21ZLCB0b1gsIHRvWSk7XHJcblx0XHRsZXQgcG9pbnQgPSBuZXcgTGF5YS5Qb2ludCgpO1xyXG5cdFx0XHJcblx0XHRwb2ludC54ID0gTWF0aC5jb3MoYW5nbGUpICogbGVuZ3RoO1xyXG5cdFx0cG9pbnQueSA9IE1hdGguc2luKGFuZ2xlKSAqIGxlbmd0aDtcclxuXHRcdHBvaW50LnggKz0gZnJvbVg7XHJcblx0XHRwb2ludC55ICs9IGZyb21ZO1xyXG5cdFx0cmV0dXJuIHBvaW50O1xyXG5cdH1cclxuXHJcblx0XHJcblx0cHVibGljIHN0YXRpYyBkaXJlY3Rpb25Qb2ludFgoZnJvbVg6IG51bWJlciwgZnJvbVk6IG51bWJlciwgdG9YOiBudW1iZXIsIHRvWTogbnVtYmVyLCAgbGVuZ3RoOm51bWJlcik6IG51bWJlclxyXG5cdHtcclxuXHRcdHJldHVybiBNYXRoLmNvcyh0aGlzLnJhZGlhbihmcm9tWCwgZnJvbVksIHRvWCwgdG9ZKSkgKiBsZW5ndGggKyBmcm9tWCA7XHJcblx0fVxyXG5cdFxyXG5cdHB1YmxpYyBzdGF0aWMgZGlyZWN0aW9uUG9pbnRZKGZyb21YOiBudW1iZXIsIGZyb21ZOiBudW1iZXIsIHRvWDogbnVtYmVyLCB0b1k6IG51bWJlciwgIGxlbmd0aDpudW1iZXIpOiBudW1iZXJcclxuXHR7XHJcblx0XHRyZXR1cm4gTWF0aC5zaW4odGhpcy5yYWRpYW4oZnJvbVgsIGZyb21ZLCB0b1gsIHRvWSkpICogbGVuZ3RoICsgZnJvbVkgO1xyXG5cdH1cclxuXHJcblx0XHJcblx0LyoqIOW8p+W6puaWueWQkSDngrkgKi9cclxuXHRwdWJsaWMgc3RhdGljIHJhZGlhblBvaW50WChyYWRpYW46IG51bWJlciwgbGVuZ3RoOiBudW1iZXIsIGZyb21YOiBudW1iZXIpOiBudW1iZXJcclxuXHR7XHJcblx0XHRyZXR1cm4gTWF0aC5jb3MocmFkaWFuKSAqIGxlbmd0aCArIGZyb21YIDtcclxuXHR9XHJcblx0XHJcblx0cHVibGljIHN0YXRpYyByYWRpYW5Qb2ludFkocmFkaWFuOiBudW1iZXIsIGxlbmd0aDogbnVtYmVyLCBmcm9tWTogbnVtYmVyKTogbnVtYmVyXHJcblx0e1xyXG5cdFx0cmV0dXJuIE1hdGguc2luKHJhZGlhbikgKiBsZW5ndGggKyBmcm9tWSA7XHJcblx0fVxyXG5cclxuXHRcclxuXHRcclxuXHQvKiog5byn5bqm5pa55ZCRIOeCuSAqL1xyXG5cdHB1YmxpYyBzdGF0aWMgYW5nbGVQb2ludFgoYW5nbGU6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIsIGZyb21YOiBudW1iZXIpOiBudW1iZXJcclxuXHR7XHJcblx0XHRyZXR1cm4gTWF0aC5jb3ModGhpcy5hbmdsZVRvUmFkaWFuKGFuZ2xlKSkgKiBsZW5ndGggKyBmcm9tWCA7XHJcblx0fVxyXG5cdFxyXG5cdHB1YmxpYyBzdGF0aWMgYW5nbGVQb2ludFkoYW5nbGU6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIsIGZyb21ZOiBudW1iZXIpOiBudW1iZXJcclxuXHR7XHJcblx0XHRyZXR1cm4gTWF0aC5zaW4odGhpcy5hbmdsZVRvUmFkaWFuKGFuZ2xlKSkgKiBsZW5ndGggKyBmcm9tWSA7XHJcblx0fVxyXG5cclxuXHRcclxuXHQvKiog6KeS5bqm5pa55ZCRIOeCuSAqL1xyXG5cdHB1YmxpYyBzdGF0aWMgUG9pbnRBbmdsZShvOiBMYXlhLlBvaW50LCBhbmdsZTogbnVtYmVyLCBsZW5ndGg6IG51bWJlcik6IExheWEuUG9pbnRcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5Qb2ludFJhZGlhbihvLCB0aGlzLmFuZ2xlVG9SYWRpYW4oYW5nbGUpLCBsZW5ndGgpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHN0YXRpYyBQb2ludFJhZGlhbihvOiBMYXlhLlBvaW50LCByYWRpYW46IG51bWJlciwgbGVuZ3RoOiBudW1iZXIpOiBMYXlhLlBvaW50XHJcblx0e1xyXG5cdFx0bGV0IHAgPSBuZXcgTGF5YS5Qb2ludCgpO1xyXG5cdFx0cC54ID0gby54ICsgTWF0aC5zaW4ocmFkaWFuKSAqIGxlbmd0aDtcclxuXHRcdHAueSA9IG8ueSArIE1hdGguY29zKHJhZGlhbikgKiBsZW5ndGg7XHJcblx0XHRyZXR1cm4gcDtcclxuXHR9XHJcblxyXG5cclxuXHJcblx0XHJcblxyXG5cdC8qKiDngrnliLDnm7Tnur/nmoTot53nprsgKi9cclxuXHRwdWJsaWMgc3RhdGljIGRpc3RhbmNlUG9pbnRUb0xpbmUocG9pbnQ6IFZlY3RvcjMgLCBsaW5lRnJvbTogVmVjdG9yMywgbGluZVRvOiBWZWN0b3IzKTogbnVtYmVyXHJcblx0e1xyXG5cclxuXHRcdGxldCBhYiA9IG5ldyBWZWN0b3IzKCk7XHJcblx0XHRWZWN0b3IzLnN1YnRyYWN0KGxpbmVUbywgbGluZUZyb20sIGFiKTtcclxuXHRcdGxldCBhYyA9IHBvaW50O1xyXG5cdFx0XHJcblx0XHRsZXQgY3Jvc3MgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0VmVjdG9yMy5jcm9zcyhhYiwgYWMsIGNyb3NzKTtcclxuXHJcblx0XHRWZWN0b3IzLmRpc3RhbmNlU3F1YXJlZChWZWN0b3IzLlpFUk8sIGNyb3NzKTtcclxuXHRcdGxldCB3ZCA9IFZlY3RvcjMuZGlzdGFuY2VTcXVhcmVkKFZlY3RvcjMuWkVSTywgY3Jvc3MpIC9cclxuXHRcdFx0VmVjdG9yMy5kaXN0YW5jZVNxdWFyZWQoVmVjdG9yMy5aRVJPLCBhYilcclxuXHRcdFxyXG5cdFx0cmV0dXJuIHdkO1xyXG5cdH1cclxuXHJcblxyXG5cdC8qKiDnm7Tnur/kuI7lnIbnm7jkuqTjgILlnIbljYrlvoTlkoznm7Tnur/nmoTnm7jkuqTngrkgKi9cclxuXHRwdWJsaWMgc3RhdGljIEludGVyc2VjdGlvblBvaW50KHBvaW50OlZlY3RvcjMgLCBoaXQ6IFZlY3RvcjMgLCByYWRpdXM6IG51bWJlciwgbGluZUZyb206VmVjdG9yMyAsIGxpbmVUbzpWZWN0b3IzICk6IFZlY3RvcjNcclxuXHR7XHJcblx0XHRsZXQgYyA9IHJhZGl1cztcclxuXHRcdGxldCBhID0gdGhpcy5kaXN0YW5jZVBvaW50VG9MaW5lKHBvaW50LCBsaW5lRnJvbSwgbGluZVRvKTtcclxuXHRcdGxldCBiID0gTWF0aC5zcXJ0KCBjICogYyAtIGEgKiBhKTtcclxuXHRcdFxyXG5cdFx0bGV0IHN1YiA9IG5ldyBWZWN0b3IzKCk7XHJcblx0XHRWZWN0b3IzLnN1YnRyYWN0KGxpbmVUbywgbGluZUZyb20sIHN1Yik7XHJcblxyXG5cdFx0bGV0IG5vcm1hbGl6ZWQgPW5ldyBWZWN0b3IzKCk7XHJcblx0XHRWZWN0b3IzLm5vcm1hbGl6ZShzdWIsIG5vcm1hbGl6ZWQpO1xyXG5cclxuXHRcdGxldCBtdWwgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0VmVjdG9yMy5zY2FsZShub3JtYWxpemVkLCBiLCBtdWwpO1xyXG5cclxuXHRcdGxldCBhZGQgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0VmVjdG9yMy5hZGQoaGl0LCBtdWwsIGFkZCk7XHJcblx0XHRcclxuXHRcdHJldHVybiBhZGQ7XHJcblx0fVxyXG5cclxuXHRcclxuXHQvKiog54K55Yiw55u057q/55qE5Z6C55u057q/5ZKM55u057q/55qE55u45Lqk54K5ICovXHJcblx0cHVibGljIHN0YXRpYyBJbnRlcnNlY3Rpb25Qb2ludDIocG9pbnQ6VmVjdG9yMyAsbGluZUZyb206IFZlY3RvcjMgLCBsaW5lVG86IFZlY3RvcjMgKTogVmVjdG9yM1xyXG5cdHtcclxuXHRcdFxyXG5cdFx0bGV0IGxpbmUgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0VmVjdG9yMy5zdWJ0cmFjdChsaW5lVG8sIGxpbmVGcm9tLCBsaW5lKTtcclxuXHRcdFxyXG5cdFx0bGV0IG5vcm1hbGl6ZWQgPW5ldyBWZWN0b3IzKCk7XHJcblx0XHRWZWN0b3IzLm5vcm1hbGl6ZShsaW5lLCBub3JtYWxpemVkKTtcclxuXHJcblx0XHRsZXQgc3ViID0gIG5ldyBWZWN0b3IzKCk7XHJcblx0XHRWZWN0b3IzLnN1YnRyYWN0KHBvaW50LCBsaW5lRnJvbSwgc3ViKTtcclxuXHJcblx0XHRsZXQgZG90ID0gVmVjdG9yMy5kb3Qoc3ViLCBsaW5lKTtcclxuXHJcblx0XHRsZXQgbXVsID0gIG5ldyBWZWN0b3IzKCk7XHJcblx0XHRWZWN0b3IzLnNjYWxlKG5vcm1hbGl6ZWQsIGRvdCwgbXVsKTtcclxuXHJcblx0XHRsZXQgYWRkID0gbmV3IFZlY3RvcjMoKTtcclxuXHRcdFZlY3RvcjMuYWRkKGxpbmVGcm9tLCBtdWwsIGFkZCk7XHJcblxyXG5cdFx0cmV0dXJuIGFkZDtcclxuXHR9XHJcblxyXG5cclxufSIsImltcG9ydCBHYW1lQ29uZmlnIGZyb20gXCIuL0dhbWVDb25maWdcIjtcclxuaW1wb3J0IENoYXJ0UG9seWdvblByb3BlcnR5VmlldyBmcm9tIFwiLi9MaWJzL0NoYXJ0UG9seWdvblByb3BlcnR5Vmlldy9DaGFydFBvbHlnb25Qcm9wZXJ0eVZpZXdcIjtcclxuY2xhc3MgTWFpbiB7XHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHQvL+agueaNrklEReiuvue9ruWIneWni+WMluW8leaTjlx0XHRcclxuXHRcdGlmICh3aW5kb3dbXCJMYXlhM0RcIl0pIExheWEzRC5pbml0KEdhbWVDb25maWcud2lkdGgsIEdhbWVDb25maWcuaGVpZ2h0KTtcclxuXHRcdGVsc2UgTGF5YS5pbml0KEdhbWVDb25maWcud2lkdGgsIEdhbWVDb25maWcuaGVpZ2h0LCBMYXlhW1wiV2ViR0xcIl0pO1xyXG5cdFx0TGF5YVtcIlBoeXNpY3NcIl0gJiYgTGF5YVtcIlBoeXNpY3NcIl0uZW5hYmxlKCk7XHJcblx0XHRMYXlhW1wiRGVidWdQYW5lbFwiXSAmJiBMYXlhW1wiRGVidWdQYW5lbFwiXS5lbmFibGUoKTtcclxuXHRcdExheWEuc3RhZ2Uuc2NhbGVNb2RlID0gR2FtZUNvbmZpZy5zY2FsZU1vZGU7XHJcblx0XHRMYXlhLnN0YWdlLnNjcmVlbk1vZGUgPSBHYW1lQ29uZmlnLnNjcmVlbk1vZGU7XHJcblx0XHQvL+WFvOWuueW+ruS/oeS4jeaUr+aMgeWKoOi9vXNjZW5l5ZCO57yA5Zy65pmvXHJcblx0XHRMYXlhLlVSTC5leHBvcnRTY2VuZVRvSnNvbiA9IEdhbWVDb25maWcuZXhwb3J0U2NlbmVUb0pzb247XHJcblxyXG5cdFx0Ly/miZPlvIDosIPor5XpnaLmnb/vvIjpgJrov4dJREXorr7nva7osIPor5XmqKHlvI/vvIzmiJbogIV1cmzlnLDlnYDlop7liqBkZWJ1Zz10cnVl5Y+C5pWw77yM5Z2H5Y+v5omT5byA6LCD6K+V6Z2i5p2/77yJXHJcblx0XHRpZiAoR2FtZUNvbmZpZy5kZWJ1ZyB8fCBMYXlhLlV0aWxzLmdldFF1ZXJ5U3RyaW5nKFwiZGVidWdcIikgPT0gXCJ0cnVlXCIpIExheWEuZW5hYmxlRGVidWdQYW5lbCgpO1xyXG5cdFx0aWYgKEdhbWVDb25maWcucGh5c2ljc0RlYnVnICYmIExheWFbXCJQaHlzaWNzRGVidWdEcmF3XCJdKSBMYXlhW1wiUGh5c2ljc0RlYnVnRHJhd1wiXS5lbmFibGUoKTtcclxuXHRcdGlmIChHYW1lQ29uZmlnLnN0YXQpIExheWEuU3RhdC5zaG93KCk7XHJcblx0XHRMYXlhLmFsZXJ0R2xvYmFsRXJyb3IgPSB0cnVlO1xyXG5cclxuXHRcdC8v5r+A5rS76LWE5rqQ54mI5pys5o6n5Yi277yMdmVyc2lvbi5qc29u55SxSURF5Y+R5biD5Yqf6IO96Ieq5Yqo55Sf5oiQ77yM5aaC5p6c5rKh5pyJ5Lmf5LiN5b2x5ZON5ZCO57ut5rWB56iLXHJcblx0XHRMYXlhLlJlc291cmNlVmVyc2lvbi5lbmFibGUoXCJ2ZXJzaW9uLmpzb25cIiwgTGF5YS5IYW5kbGVyLmNyZWF0ZSh0aGlzLCB0aGlzLm9uVmVyc2lvbkxvYWRlZCksIExheWEuUmVzb3VyY2VWZXJzaW9uLkZJTEVOQU1FX1ZFUlNJT04pO1xyXG5cclxuXHRcdGxldCBjaGFydCA9IG5ldyBDaGFydFBvbHlnb25Qcm9wZXJ0eVZpZXcoKTtcclxuXHRcdGNoYXJ0LnggPSBMYXlhLnN0YWdlLndpZHRoID4+IDE7XHJcblx0XHRjaGFydC55ID0gTGF5YS5zdGFnZS5oZWlnaHQgKiAwLjU7XHJcblx0XHRMYXlhLnN0YWdlLmFkZENoaWxkKGNoYXJ0KTtcclxuXHR9XHJcblxyXG5cdG9uVmVyc2lvbkxvYWRlZCgpOiB2b2lkIHtcclxuXHRcdC8v5r+A5rS75aSn5bCP5Zu+5pig5bCE77yM5Yqg6L295bCP5Zu+55qE5pe25YCZ77yM5aaC5p6c5Y+R546w5bCP5Zu+5Zyo5aSn5Zu+5ZCI6ZuG6YeM6Z2i77yM5YiZ5LyY5YWI5Yqg6L295aSn5Zu+5ZCI6ZuG77yM6ICM5LiN5piv5bCP5Zu+XHJcblx0XHRMYXlhLkF0bGFzSW5mb01hbmFnZXIuZW5hYmxlKFwiZmlsZWNvbmZpZy5qc29uXCIsIExheWEuSGFuZGxlci5jcmVhdGUodGhpcywgdGhpcy5vbkNvbmZpZ0xvYWRlZCkpO1xyXG5cdH1cclxuXHJcblx0b25Db25maWdMb2FkZWQoKTogdm9pZCB7XHJcblx0XHQvL+WKoOi9vUlEReaMh+WumueahOWcuuaZr1xyXG5cdFx0Ly8gR2FtZUNvbmZpZy5zdGFydFNjZW5lICYmIExheWEuU2NlbmUub3BlbihHYW1lQ29uZmlnLnN0YXJ0U2NlbmUpO1xyXG5cdH1cclxufVxyXG4vL+a/gOa0u+WQr+WKqOexu1xyXG5uZXcgTWFpbigpO1xyXG4iLCIvKipcclxuICog5a2Q5by56ISa5pys77yM5a6e546w5a2Q5by56aOe6KGM6YC76L6R5Y+K5a+56LGh5rGg5Zue5pS25py65Yi2XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCdWxsZXQgZXh0ZW5kcyBMYXlhLlNjcmlwdCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHsgc3VwZXIoKTsgfVxyXG5cclxuICAgIG9uRW5hYmxlKCk6IHZvaWQge1xyXG4gICAgICAgIC8v6K6+572u5Yid5aeL6YCf5bqmXHJcbiAgICAgICAgdmFyIHJpZzogTGF5YS5SaWdpZEJvZHkgPSB0aGlzLm93bmVyLmdldENvbXBvbmVudChMYXlhLlJpZ2lkQm9keSk7XHJcbiAgICAgICAgcmlnLnNldFZlbG9jaXR5KHsgeDogMCwgeTogLTEwIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG9uVHJpZ2dlckVudGVyKG90aGVyOiBhbnksIHNlbGY6IGFueSwgY29udGFjdDogYW55KTogdm9pZCB7XHJcbiAgICAgICAgLy/lpoLmnpzooqvnorDliLDvvIzliJnnp7vpmaTlrZDlvLlcclxuICAgICAgICB0aGlzLm93bmVyLnJlbW92ZVNlbGYoKTtcclxuICAgIH1cclxuXHJcbiAgICBvblVwZGF0ZSgpOiB2b2lkIHtcclxuICAgICAgICAvL+WmguaenOWtkOW8uei2heWHuuWxj+W5le+8jOWImeenu+mZpOWtkOW8uVxyXG4gICAgICAgIGlmICgodGhpcy5vd25lciBhcyBMYXlhLlNwcml0ZSkueSA8IC0xMCkge1xyXG4gICAgICAgICAgICB0aGlzLm93bmVyLnJlbW92ZVNlbGYoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25EaXNhYmxlKCk6IHZvaWQge1xyXG4gICAgICAgIC8v5a2Q5by56KKr56e76Zmk5pe277yM5Zue5pS25a2Q5by55Yiw5a+56LGh5rGg77yM5pa55L6/5LiL5qyh5aSN55So77yM5YeP5bCR5a+56LGh5Yib5bu65byA6ZSAXHJcbiAgICAgICAgTGF5YS5Qb29sLnJlY292ZXIoXCJidWxsZXRcIiwgdGhpcy5vd25lcik7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgR2FtZVVJIGZyb20gXCIuL0dhbWVVSVwiO1xyXG4vKipcclxuICog5o6J6JC955uS5a2Q6ISa5pys77yM5a6e546w55uS5a2Q56Kw5pKe5Y+K5Zue5pS25rWB56iLXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEcm9wQm94IGV4dGVuZHMgTGF5YS5TY3JpcHQge1xyXG4gICAgLyoq55uS5a2Q562J57qnICovXHJcbiAgICBsZXZlbDogbnVtYmVyID0gMTtcclxuICAgIC8qKuetiee6p+aWh+acrOWvueixoeW8leeUqCAqL1xyXG4gICAgcHJpdmF0ZSBfdGV4dDogTGF5YS5UZXh0O1xyXG4gICAgLyoq5Yia5L2T5a+56LGh5byV55SoICovXHJcbiAgICBwcml2YXRlIF9yaWc6IExheWEuUmlnaWRCb2R5XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7IHN1cGVyKCk7IH1cclxuICAgIG9uRW5hYmxlKCk6IHZvaWQge1xyXG4gICAgICAgIC8qKuiOt+W+l+e7hOS7tuW8leeUqO+8jOmBv+WFjeavj+asoeiOt+WPlue7hOS7tuW4puadpeS4jeW/heimgeeahOafpeivouW8gOmUgCAqL1xyXG4gICAgICAgIHRoaXMuX3JpZyA9IHRoaXMub3duZXIuZ2V0Q29tcG9uZW50KExheWEuUmlnaWRCb2R5KTtcclxuICAgICAgICB0aGlzLmxldmVsID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogNSkgKyAxO1xyXG4gICAgICAgIHRoaXMuX3RleHQgPSB0aGlzLm93bmVyLmdldENoaWxkQnlOYW1lKFwibGV2ZWxUeHRcIikgYXMgTGF5YS5UZXh0O1xyXG4gICAgICAgIHRoaXMuX3RleHQudGV4dCA9IHRoaXMubGV2ZWwgKyBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIG9uVXBkYXRlKCk6IHZvaWQge1xyXG4gICAgICAgIC8v6K6p5oyB57ut55uS5a2Q5peL6L2sXHJcbiAgICAgICAgKHRoaXMub3duZXIgYXMgTGF5YS5TcHJpdGUpLnJvdGF0aW9uKys7XHJcbiAgICB9XHJcblxyXG4gICAgb25UcmlnZ2VyRW50ZXIob3RoZXI6IGFueSwgc2VsZjogYW55LCBjb250YWN0OiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB2YXIgb3duZXI6IExheWEuU3ByaXRlID0gdGhpcy5vd25lciBhcyBMYXlhLlNwcml0ZTtcclxuICAgICAgICBpZiAob3RoZXIubGFiZWwgPT09IFwiYnV0dGxlXCIpIHtcclxuICAgICAgICAgICAgLy/norDmkp7liLDlrZDlvLnlkI7vvIzlop7liqDnp6/liIbvvIzmkq3mlL7lo7Dpn7PnibnmlYhcclxuICAgICAgICAgICAgaWYgKHRoaXMubGV2ZWwgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxldmVsLS07XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90ZXh0LmNoYW5nZVRleHQodGhpcy5sZXZlbCArIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgb3duZXIuZ2V0Q29tcG9uZW50KExheWEuUmlnaWRCb2R5KS5zZXRWZWxvY2l0eSh7IHg6IDAsIHk6IC0xMCB9KTtcclxuICAgICAgICAgICAgICAgIExheWEuU291bmRNYW5hZ2VyLnBsYXlTb3VuZChcInNvdW5kL2hpdC53YXZcIik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob3duZXIucGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVmZmVjdDogTGF5YS5BbmltYXRpb24gPSBMYXlhLlBvb2wuZ2V0SXRlbUJ5Q3JlYXRlRnVuKFwiZWZmZWN0XCIsIHRoaXMuY3JlYXRlRWZmZWN0LCB0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICBlZmZlY3QucG9zKG93bmVyLngsIG93bmVyLnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIG93bmVyLnBhcmVudC5hZGRDaGlsZChlZmZlY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdC5wbGF5KDAsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIG93bmVyLnJlbW92ZVNlbGYoKTtcclxuICAgICAgICAgICAgICAgICAgICBMYXlhLlNvdW5kTWFuYWdlci5wbGF5U291bmQoXCJzb3VuZC9kZXN0cm95LndhdlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBHYW1lVUkuaW5zdGFuY2UuYWRkU2NvcmUoMSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChvdGhlci5sYWJlbCA9PT0gXCJncm91bmRcIikge1xyXG4gICAgICAgICAgICAvL+WPquimgeacieS4gOS4quebkuWtkOeisOWIsOWcsOadv++8jOWImeWBnOatoua4uOaIj1xyXG4gICAgICAgICAgICBvd25lci5yZW1vdmVTZWxmKCk7XHJcbiAgICAgICAgICAgIEdhbWVVSS5pbnN0YW5jZS5zdG9wR2FtZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKirkvb/nlKjlr7nosaHmsaDliJvlu7rniIbngrjliqjnlLsgKi9cclxuICAgIGNyZWF0ZUVmZmVjdCgpOiBMYXlhLkFuaW1hdGlvbiB7XHJcbiAgICAgICAgbGV0IGFuaTogTGF5YS5BbmltYXRpb24gPSBuZXcgTGF5YS5BbmltYXRpb24oKTtcclxuICAgICAgICBhbmkubG9hZEFuaW1hdGlvbihcInRlc3QvVGVzdEFuaS5hbmlcIik7XHJcbiAgICAgICAgYW5pLm9uKExheWEuRXZlbnQuQ09NUExFVEUsIG51bGwsIHJlY292ZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIHJlY292ZXIoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGFuaS5yZW1vdmVTZWxmKCk7XHJcbiAgICAgICAgICAgIExheWEuUG9vbC5yZWNvdmVyKFwiZWZmZWN0XCIsIGFuaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhbmk7XHJcbiAgICB9XHJcblxyXG4gICAgb25EaXNhYmxlKCk6IHZvaWQge1xyXG4gICAgICAgIC8v55uS5a2Q6KKr56e76Zmk5pe277yM5Zue5pS255uS5a2Q5Yiw5a+56LGh5rGg77yM5pa55L6/5LiL5qyh5aSN55So77yM5YeP5bCR5a+56LGh5Yib5bu65byA6ZSA44CCXHJcbiAgICAgICAgTGF5YS5Qb29sLnJlY292ZXIoXCJkcm9wQm94XCIsIHRoaXMub3duZXIpO1xyXG4gICAgfVxyXG59IiwiXHJcbmltcG9ydCBEcm9wQm94IGZyb20gXCIuL0Ryb3BCb3hcIjtcclxuaW1wb3J0IEJ1bGxldCBmcm9tIFwiLi9CdWxsZXRcIjtcclxuLyoqXHJcbiAqIOa4uOaIj+aOp+WItuiEmuacrOOAguWumuS5ieS6huWHoOS4qmRyb3BCb3jvvIxidWxsZXTvvIxjcmVhdGVCb3hJbnRlcnZhbOetieWPmOmHj++8jOiDveWkn+WcqElEReaYvuekuuWPiuiuvue9ruivpeWPmOmHj1xyXG4gKiDmm7TlpJrnsbvlnovlrprkuYnvvIzor7flj4LogIPlrpjmlrnmlofmoaNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVDb250cm9sIGV4dGVuZHMgTGF5YS5TY3JpcHQge1xyXG4gICAgLyoqIEBwcm9wIHtuYW1lOmRyb3BCb3gsdGlwczpcIuaOieiQveWuueWZqOmihOWItuS9k+WvueixoVwiLHR5cGU6UHJlZmFifSovXHJcbiAgICBkcm9wQm94OiBMYXlhLlByZWZhYjtcclxuICAgIC8qKiBAcHJvcCB7bmFtZTpidWxsZXQsdGlwczpcIuWtkOW8uemihOWItuS9k+WvueixoVwiLHR5cGU6UHJlZmFifSovXHJcbiAgICBidWxsZXQ6IExheWEuUHJlZmFiO1xyXG4gICAgLyoqIEBwcm9wIHtuYW1lOmNyZWF0ZUJveEludGVydmFsLHRpcHM6XCLpl7TpmpTlpJrlsJHmr6vnp5LliJvlu7rkuIDkuKrkuIvot4znmoTlrrnlmahcIix0eXBlOmludCxkZWZhdWx0OjEwMDB9Ki9cclxuICAgIGNyZWF0ZUJveEludGVydmFsOiBudW1iZXIgPSAxMDAwO1xyXG4gICAgLyoq5byA5aeL5pe26Ze0Ki9cclxuICAgIHByaXZhdGUgX3RpbWU6IG51bWJlciA9IDA7XHJcbiAgICAvKirmmK/lkKblt7Lnu4/lvIDlp4vmuLjmiI8gKi9cclxuICAgIHByaXZhdGUgX3N0YXJ0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIC8qKuWtkOW8ueWSjOebkuWtkOaJgOWcqOeahOWuueWZqOWvueixoSAqL1xyXG4gICAgcHJpdmF0ZSBfZ2FtZUJveDogTGF5YS5TcHJpdGU7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7IHN1cGVyKCk7IH1cclxuXHJcbiAgICBvbkVuYWJsZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl90aW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICB0aGlzLl9nYW1lQm94ID0gdGhpcy5vd25lci5nZXRDaGlsZEJ5TmFtZShcImdhbWVCb3hcIikgYXMgTGF5YS5TcHJpdGU7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVCb3goKTtcclxuICAgIH1cclxuXHJcbiAgICBvblVwZGF0ZSgpOiB2b2lkIHtcclxuICAgICAgICAvL+avj+mXtOmalOS4gOauteaXtumXtOWIm+W7uuS4gOS4quebkuWtkFxyXG4gICAgICAgIGxldCBub3cgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIGlmIChub3cgLSB0aGlzLl90aW1lID4gdGhpcy5jcmVhdGVCb3hJbnRlcnZhbCkge1xyXG4gICAgICAgICAgICB0aGlzLl90aW1lID0gbm93O1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUJveCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVCb3goKTogdm9pZCB7XHJcbiAgICAgICAgLy/kvb/nlKjlr7nosaHmsaDliJvlu7rnm5LlrZBcclxuICAgICAgICBsZXQgYm94OiBMYXlhLlNwcml0ZSA9IExheWEuUG9vbC5nZXRJdGVtQnlDcmVhdGVGdW4oXCJkcm9wQm94XCIsIHRoaXMuZHJvcEJveC5jcmVhdGUsIHRoaXMuZHJvcEJveCk7XHJcbiAgICAgICAgYm94LnBvcyhNYXRoLnJhbmRvbSgpICogKExheWEuc3RhZ2Uud2lkdGggLSAxMDApLCAtMTAwKTtcclxuICAgICAgICB0aGlzLl9nYW1lQm94LmFkZENoaWxkKGJveCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25TdGFnZUNsaWNrKGU6IExheWEuRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICAvL+WBnOatouS6i+S7tuWGkuazoe+8jOaPkOmrmOaAp+iDve+8jOW9k+eEtuS5n+WPr+S7peS4jeimgVxyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgLy/oiJ7lj7Dooqvngrnlh7vlkI7vvIzkvb/nlKjlr7nosaHmsaDliJvlu7rlrZDlvLlcclxuICAgICAgICBsZXQgZmx5ZXI6IExheWEuU3ByaXRlID0gTGF5YS5Qb29sLmdldEl0ZW1CeUNyZWF0ZUZ1bihcImJ1bGxldFwiLCB0aGlzLmJ1bGxldC5jcmVhdGUsIHRoaXMuYnVsbGV0KTtcclxuICAgICAgICBmbHllci5wb3MoTGF5YS5zdGFnZS5tb3VzZVgsIExheWEuc3RhZ2UubW91c2VZKTtcclxuICAgICAgICB0aGlzLl9nYW1lQm94LmFkZENoaWxkKGZseWVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKirlvIDlp4vmuLjmiI/vvIzpgJrov4fmv4DmtLvmnKzohJrmnKzmlrnlvI/lvIDlp4vmuLjmiI8qL1xyXG4gICAgc3RhcnRHYW1lKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5fc3RhcnRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9zdGFydGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoq57uT5p2f5ri45oiP77yM6YCa6L+H6Z2e5r+A5rS75pys6ISa5pys5YGc5q2i5ri45oiPICovXHJcbiAgICBzdG9wR2FtZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9zdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5lbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVCb3hJbnRlcnZhbCA9IDEwMDA7XHJcbiAgICAgICAgdGhpcy5fZ2FtZUJveC5yZW1vdmVDaGlsZHJlbigpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgdWkgfSBmcm9tIFwiLi8uLi91aS9sYXlhTWF4VUlcIjtcclxuaW1wb3J0IEdhbWVDb250cm9sIGZyb20gXCIuL0dhbWVDb250cm9sXCJcclxuLyoqXHJcbiAqIOacrOekuuS+i+mHh+eUqOmdnuiEmuacrOeahOaWueW8j+WunueOsO+8jOiAjOS9v+eUqOe7p+aJv+mhtemdouWfuuexu++8jOWunueOsOmhtemdoumAu+i+keOAguWcqElERemHjOmdouiuvue9ruWcuuaZr+eahFJ1bnRpbWXlsZ7mgKfljbPlj6/lkozlnLrmma/ov5vooYzlhbPogZRcclxuICog55u45q+U6ISa5pys5pa55byP77yM57un5om/5byP6aG16Z2i57G777yM5Y+v5Lul55u05o6l5L2/55So6aG16Z2i5a6a5LmJ55qE5bGe5oCn77yI6YCa6L+HSURF5YaFdmFy5bGe5oCn5a6a5LmJ77yJ77yM5q+U5aaCdGhpcy50aXBMYmxs77yMdGhpcy5zY29yZUxibO+8jOWFt+acieS7o+eggeaPkOekuuaViOaenFxyXG4gKiDlu7rorq7vvJrlpoLmnpzmmK/pobXpnaLnuqfnmoTpgLvovpHvvIzpnIDopoHpopHnuYHorr/pl67pobXpnaLlhoXlpJrkuKrlhYPntKDvvIzkvb/nlKjnu6fmib/lvI/lhpnms5XvvIzlpoLmnpzmmK/ni6znq4vlsI/mqKHlnZfvvIzlip/og73ljZXkuIDvvIzlu7rorq7nlKjohJrmnKzmlrnlvI/lrp7njrDvvIzmr5TlpoLlrZDlvLnohJrmnKzjgIJcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVVSSBleHRlbmRzIHVpLnRlc3QuVGVzdFNjZW5lVUkge1xyXG4gICAgLyoq6K6+572u5Y2V5L6L55qE5byV55So5pa55byP77yM5pa55L6/5YW25LuW57G75byV55SoICovXHJcbiAgICBzdGF0aWMgaW5zdGFuY2U6IEdhbWVVSTtcclxuICAgIC8qKuW9k+WJjea4uOaIj+enr+WIhuWtl+autSAqL1xyXG4gICAgcHJpdmF0ZSBfc2NvcmU6IG51bWJlcjtcclxuICAgIC8qKua4uOaIj+aOp+WItuiEmuacrOW8leeUqO+8jOmBv+WFjeavj+asoeiOt+WPlue7hOS7tuW4puadpeS4jeW/heimgeeahOaAp+iDveW8gOmUgCAqL1xyXG4gICAgcHJpdmF0ZSBfY29udHJvbDogR2FtZUNvbnRyb2w7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICBHYW1lVUkuaW5zdGFuY2UgPSB0aGlzO1xyXG4gICAgICAgIC8v5YWz6Zet5aSa54K56Kem5o6n77yM5ZCm5YiZ5bCx5peg5pWM5LqGXHJcbiAgICAgICAgTGF5YS5Nb3VzZU1hbmFnZXIubXVsdGlUb3VjaEVuYWJsZWQgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBvbkVuYWJsZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9jb250cm9sID0gdGhpcy5nZXRDb21wb25lbnQoR2FtZUNvbnRyb2wpO1xyXG4gICAgICAgIC8v54K55Ye75o+Q56S65paH5a2X77yM5byA5aeL5ri45oiPXHJcbiAgICAgICAgdGhpcy50aXBMYmxsLm9uKExheWEuRXZlbnQuQ0xJQ0ssIHRoaXMsIHRoaXMub25UaXBDbGljayk7XHJcbiAgICB9XHJcblxyXG4gICAgb25UaXBDbGljayhlOiBMYXlhLkV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy50aXBMYmxsLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9zY29yZSA9IDA7XHJcbiAgICAgICAgdGhpcy5zY29yZUxibC50ZXh0ID0gXCJcIjtcclxuICAgICAgICB0aGlzLl9jb250cm9sLnN0YXJ0R2FtZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKuWinuWKoOWIhuaVsCAqL1xyXG4gICAgYWRkU2NvcmUodmFsdWU6IG51bWJlciA9IDEpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9zY29yZSArPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLnNjb3JlTGJsLmNoYW5nZVRleHQoXCLliIbmlbDvvJpcIiArIHRoaXMuX3Njb3JlKTtcclxuICAgICAgICAvL+maj+edgOWIhuaVsOi2iumrmO+8jOmavuW6puWinuWkp1xyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sLmNyZWF0ZUJveEludGVydmFsID4gNjAwICYmIHRoaXMuX3Njb3JlICUgMjAgPT0gMCkgdGhpcy5fY29udHJvbC5jcmVhdGVCb3hJbnRlcnZhbCAtPSAyMDtcclxuICAgIH1cclxuXHJcbiAgICAvKirlgZzmraLmuLjmiI8gKi9cclxuICAgIHN0b3BHYW1lKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudGlwTGJsbC52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnRpcExibGwudGV4dCA9IFwi5ri45oiP57uT5p2f5LqG77yM54K55Ye75bGP5bmV6YeN5paw5byA5aeLXCI7XHJcbiAgICAgICAgdGhpcy5fY29udHJvbC5zdG9wR2FtZSgpO1xyXG4gICAgfVxyXG59IiwiLyoqVGhpcyBjbGFzcyBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSBMYXlhQWlySURFLCBwbGVhc2UgZG8gbm90IG1ha2UgYW55IG1vZGlmaWNhdGlvbnMuICovXHJcbmltcG9ydCBWaWV3PUxheWEuVmlldztcclxuaW1wb3J0IERpYWxvZz1MYXlhLkRpYWxvZztcclxuaW1wb3J0IFNjZW5lPUxheWEuU2NlbmU7XHJcbmV4cG9ydCBtb2R1bGUgdWkudGVzdCB7XHJcbiAgICBleHBvcnQgY2xhc3MgVGVzdFNjZW5lVUkgZXh0ZW5kcyBTY2VuZSB7XHJcblx0XHRwdWJsaWMgc2NvcmVMYmw6TGF5YS5MYWJlbDtcclxuXHRcdHB1YmxpYyB0aXBMYmxsOkxheWEuTGFiZWw7XHJcbiAgICAgICAgY29uc3RydWN0b3IoKXsgc3VwZXIoKX1cclxuICAgICAgICBjcmVhdGVDaGlsZHJlbigpOnZvaWQge1xyXG4gICAgICAgICAgICBzdXBlci5jcmVhdGVDaGlsZHJlbigpO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRTY2VuZShcInRlc3QvVGVzdFNjZW5lXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=
